{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('../GetIntrinsic.js');\nvar $construct = GetIntrinsic('%Reflect.construct%', true);\nvar DefinePropertyOrThrow = require('./DefinePropertyOrThrow');\ntry {\n  DefinePropertyOrThrow({}, '', {\n    '[[Get]]': function () {}\n  });\n} catch (e) {\n  // Accessor properties aren't supported\n  DefinePropertyOrThrow = null;\n}\n\n// https://262.ecma-international.org/6.0/#sec-isconstructor\n\nif (DefinePropertyOrThrow && $construct) {\n  var isConstructorMarker = {};\n  var badArrayLike = {};\n  DefinePropertyOrThrow(badArrayLike, 'length', {\n    '[[Get]]': function () {\n      throw isConstructorMarker;\n    },\n    '[[Enumerable]]': true\n  });\n  module.exports = function IsConstructor(argument) {\n    try {\n      // `Reflect.construct` invokes `IsConstructor(target)` before `Get(args, 'length')`:\n      $construct(argument, badArrayLike);\n    } catch (err) {\n      return err === isConstructorMarker;\n    }\n  };\n} else {\n  module.exports = function IsConstructor(argument) {\n    // unfortunately there's no way to truly check this without try/catch `new argument` in old environments\n    return typeof argument === 'function' && !!argument.prototype;\n  };\n}","map":{"version":3,"names":["GetIntrinsic","require","$construct","DefinePropertyOrThrow","[[Get]]","e","isConstructorMarker","badArrayLike","module","exports","IsConstructor","argument","err","prototype"],"sources":["C:/Spor+ing/Sporting_front/node_modules/es-abstract/2022/IsConstructor.js"],"sourcesContent":["'use strict';\r\n\r\nvar GetIntrinsic = require('../GetIntrinsic.js');\r\n\r\nvar $construct = GetIntrinsic('%Reflect.construct%', true);\r\n\r\nvar DefinePropertyOrThrow = require('./DefinePropertyOrThrow');\r\ntry {\r\n\tDefinePropertyOrThrow({}, '', { '[[Get]]': function () {} });\r\n} catch (e) {\r\n\t// Accessor properties aren't supported\r\n\tDefinePropertyOrThrow = null;\r\n}\r\n\r\n// https://262.ecma-international.org/6.0/#sec-isconstructor\r\n\r\nif (DefinePropertyOrThrow && $construct) {\r\n\tvar isConstructorMarker = {};\r\n\tvar badArrayLike = {};\r\n\tDefinePropertyOrThrow(badArrayLike, 'length', {\r\n\t\t'[[Get]]': function () {\r\n\t\t\tthrow isConstructorMarker;\r\n\t\t},\r\n\t\t'[[Enumerable]]': true\r\n\t});\r\n\r\n\tmodule.exports = function IsConstructor(argument) {\r\n\t\ttry {\r\n\t\t\t// `Reflect.construct` invokes `IsConstructor(target)` before `Get(args, 'length')`:\r\n\t\t\t$construct(argument, badArrayLike);\r\n\t\t} catch (err) {\r\n\t\t\treturn err === isConstructorMarker;\r\n\t\t}\r\n\t};\r\n} else {\r\n\tmodule.exports = function IsConstructor(argument) {\r\n\t\t// unfortunately there's no way to truly check this without try/catch `new argument` in old environments\r\n\t\treturn typeof argument === 'function' && !!argument.prototype;\r\n\t};\r\n}\r\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,YAAY,GAAGC,OAAO,CAAC,oBAAoB,CAAC;AAEhD,IAAIC,UAAU,GAAGF,YAAY,CAAC,qBAAqB,EAAE,IAAI,CAAC;AAE1D,IAAIG,qBAAqB,GAAGF,OAAO,CAAC,yBAAyB,CAAC;AAC9D,IAAI;EACHE,qBAAqB,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE;IAAE,SAAS,EAAE,SAAAC,CAAA,EAAY,CAAC;EAAE,CAAC,CAAC;AAC7D,CAAC,CAAC,OAAOC,CAAC,EAAE;EACX;EACAF,qBAAqB,GAAG,IAAI;AAC7B;;AAEA;;AAEA,IAAIA,qBAAqB,IAAID,UAAU,EAAE;EACxC,IAAII,mBAAmB,GAAG,CAAC,CAAC;EAC5B,IAAIC,YAAY,GAAG,CAAC,CAAC;EACrBJ,qBAAqB,CAACI,YAAY,EAAE,QAAQ,EAAE;IAC7C,SAAS,EAAE,SAAAH,CAAA,EAAY;MACtB,MAAME,mBAAmB;IAC1B,CAAC;IACD,gBAAgB,EAAE;EACnB,CAAC,CAAC;EAEFE,MAAM,CAACC,OAAO,GAAG,SAASC,aAAaA,CAACC,QAAQ,EAAE;IACjD,IAAI;MACH;MACAT,UAAU,CAACS,QAAQ,EAAEJ,YAAY,CAAC;IACnC,CAAC,CAAC,OAAOK,GAAG,EAAE;MACb,OAAOA,GAAG,KAAKN,mBAAmB;IACnC;EACD,CAAC;AACF,CAAC,MAAM;EACNE,MAAM,CAACC,OAAO,GAAG,SAASC,aAAaA,CAACC,QAAQ,EAAE;IACjD;IACA,OAAO,OAAOA,QAAQ,KAAK,UAAU,IAAI,CAAC,CAACA,QAAQ,CAACE,SAAS;EAC9D,CAAC;AACF"},"metadata":{},"sourceType":"script","externalDependencies":[]}