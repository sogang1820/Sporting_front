{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\nvar $species = GetIntrinsic('%Symbol.species%', true);\nvar $TypeError = GetIntrinsic('%TypeError%');\nvar ArrayCreate = require('./ArrayCreate');\nvar Get = require('./Get');\nvar IsArray = require('./IsArray');\nvar IsConstructor = require('./IsConstructor');\nvar IsIntegralNumber = require('./IsIntegralNumber');\nvar Type = require('./Type');\n\n// https://262.ecma-international.org/12.0/#sec-arrayspeciescreate\n\nmodule.exports = function ArraySpeciesCreate(originalArray, length) {\n  if (!IsIntegralNumber(length) || length < 0) {\n    throw new $TypeError('Assertion failed: length must be an integer >= 0');\n  }\n  var isArray = IsArray(originalArray);\n  if (!isArray) {\n    return ArrayCreate(length);\n  }\n  var C = Get(originalArray, 'constructor');\n  // TODO: figure out how to make a cross-realm normal Array, a same-realm Array\n  // if (IsConstructor(C)) {\n  // \tif C is another realm's Array, C = undefined\n  // \tObject.getPrototypeOf(Object.getPrototypeOf(Object.getPrototypeOf(Array))) === null ?\n  // }\n  if ($species && Type(C) === 'Object') {\n    C = Get(C, $species);\n    if (C === null) {\n      C = void 0;\n    }\n  }\n  if (typeof C === 'undefined') {\n    return ArrayCreate(length);\n  }\n  if (!IsConstructor(C)) {\n    throw new $TypeError('C must be a constructor');\n  }\n  return new C(length); // Construct(C, length);\n};","map":{"version":3,"names":["GetIntrinsic","require","$species","$TypeError","ArrayCreate","Get","IsArray","IsConstructor","IsIntegralNumber","Type","module","exports","ArraySpeciesCreate","originalArray","length","isArray","C"],"sources":["C:/Spor+ing/Sporting_front/node_modules/es-abstract/2022/ArraySpeciesCreate.js"],"sourcesContent":["'use strict';\r\n\r\nvar GetIntrinsic = require('get-intrinsic');\r\n\r\nvar $species = GetIntrinsic('%Symbol.species%', true);\r\nvar $TypeError = GetIntrinsic('%TypeError%');\r\n\r\nvar ArrayCreate = require('./ArrayCreate');\r\nvar Get = require('./Get');\r\nvar IsArray = require('./IsArray');\r\nvar IsConstructor = require('./IsConstructor');\r\nvar IsIntegralNumber = require('./IsIntegralNumber');\r\nvar Type = require('./Type');\r\n\r\n// https://262.ecma-international.org/12.0/#sec-arrayspeciescreate\r\n\r\nmodule.exports = function ArraySpeciesCreate(originalArray, length) {\r\n\tif (!IsIntegralNumber(length) || length < 0) {\r\n\t\tthrow new $TypeError('Assertion failed: length must be an integer >= 0');\r\n\t}\r\n\r\n\tvar isArray = IsArray(originalArray);\r\n\tif (!isArray) {\r\n\t\treturn ArrayCreate(length);\r\n\t}\r\n\r\n\tvar C = Get(originalArray, 'constructor');\r\n\t// TODO: figure out how to make a cross-realm normal Array, a same-realm Array\r\n\t// if (IsConstructor(C)) {\r\n\t// \tif C is another realm's Array, C = undefined\r\n\t// \tObject.getPrototypeOf(Object.getPrototypeOf(Object.getPrototypeOf(Array))) === null ?\r\n\t// }\r\n\tif ($species && Type(C) === 'Object') {\r\n\t\tC = Get(C, $species);\r\n\t\tif (C === null) {\r\n\t\t\tC = void 0;\r\n\t\t}\r\n\t}\r\n\r\n\tif (typeof C === 'undefined') {\r\n\t\treturn ArrayCreate(length);\r\n\t}\r\n\tif (!IsConstructor(C)) {\r\n\t\tthrow new $TypeError('C must be a constructor');\r\n\t}\r\n\treturn new C(length); // Construct(C, length);\r\n};\r\n\r\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,YAAY,GAAGC,OAAO,CAAC,eAAe,CAAC;AAE3C,IAAIC,QAAQ,GAAGF,YAAY,CAAC,kBAAkB,EAAE,IAAI,CAAC;AACrD,IAAIG,UAAU,GAAGH,YAAY,CAAC,aAAa,CAAC;AAE5C,IAAII,WAAW,GAAGH,OAAO,CAAC,eAAe,CAAC;AAC1C,IAAII,GAAG,GAAGJ,OAAO,CAAC,OAAO,CAAC;AAC1B,IAAIK,OAAO,GAAGL,OAAO,CAAC,WAAW,CAAC;AAClC,IAAIM,aAAa,GAAGN,OAAO,CAAC,iBAAiB,CAAC;AAC9C,IAAIO,gBAAgB,GAAGP,OAAO,CAAC,oBAAoB,CAAC;AACpD,IAAIQ,IAAI,GAAGR,OAAO,CAAC,QAAQ,CAAC;;AAE5B;;AAEAS,MAAM,CAACC,OAAO,GAAG,SAASC,kBAAkBA,CAACC,aAAa,EAAEC,MAAM,EAAE;EACnE,IAAI,CAACN,gBAAgB,CAACM,MAAM,CAAC,IAAIA,MAAM,GAAG,CAAC,EAAE;IAC5C,MAAM,IAAIX,UAAU,CAAC,kDAAkD,CAAC;EACzE;EAEA,IAAIY,OAAO,GAAGT,OAAO,CAACO,aAAa,CAAC;EACpC,IAAI,CAACE,OAAO,EAAE;IACb,OAAOX,WAAW,CAACU,MAAM,CAAC;EAC3B;EAEA,IAAIE,CAAC,GAAGX,GAAG,CAACQ,aAAa,EAAE,aAAa,CAAC;EACzC;EACA;EACA;EACA;EACA;EACA,IAAIX,QAAQ,IAAIO,IAAI,CAACO,CAAC,CAAC,KAAK,QAAQ,EAAE;IACrCA,CAAC,GAAGX,GAAG,CAACW,CAAC,EAAEd,QAAQ,CAAC;IACpB,IAAIc,CAAC,KAAK,IAAI,EAAE;MACfA,CAAC,GAAG,KAAK,CAAC;IACX;EACD;EAEA,IAAI,OAAOA,CAAC,KAAK,WAAW,EAAE;IAC7B,OAAOZ,WAAW,CAACU,MAAM,CAAC;EAC3B;EACA,IAAI,CAACP,aAAa,CAACS,CAAC,CAAC,EAAE;IACtB,MAAM,IAAIb,UAAU,CAAC,yBAAyB,CAAC;EAChD;EACA,OAAO,IAAIa,CAAC,CAACF,MAAM,CAAC,CAAC,CAAC;AACvB,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}