{"ast":null,"code":"import { LOGIN_SUCCESS, LOGOUT_SUCCESS } from \"../actions/authActions\";\nexport const FETCH_USER_INFO_REQUEST = \"FETCH_USER_INFO_REQUEST\";\nexport const FETCH_USER_INFO_SUCCESS = \"FETCH_USER_INFO_SUCCESS\";\nexport const FETCH_USER_INFO_FAILURE = \"FETCH_USER_INFO_FAILURE\";\n\n// 초기 상태\nconst initialState = {\n  isLoggedIn: false,\n  user: {\n    accessToken: \"\",\n    username: \"\"\n  }\n};\n\n// 리듀서 함수\nconst authReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case LOGIN_SUCCESS:\n      return {\n        ...state,\n        isLoggedIn: true,\n        user: {\n          accessToken: action.payload.accessToken,\n          user_id: action.payload.user_id\n        }\n      };\n    case LOGOUT_SUCCESS:\n      return {\n        ...state,\n        isLoggedIn: false,\n        user: null\n      };\n    default:\n      return state;\n  }\n};\nexport default authReducer;\n\n/* 초기 상태를 정의하고 로그인 상태와 사용자 정보를 포함\r\n리듀서 함수를 작성 리듀서는 현재 상태와 액션을 받아 새로운 상태를 반환하는 함수 스위치문 사용해 액션 유형(authActions)에 따라 상태 변경\r\n*/","map":{"version":3,"names":["LOGIN_SUCCESS","LOGOUT_SUCCESS","FETCH_USER_INFO_REQUEST","FETCH_USER_INFO_SUCCESS","FETCH_USER_INFO_FAILURE","initialState","isLoggedIn","user","accessToken","username","authReducer","state","arguments","length","undefined","action","type","payload","user_id"],"sources":["C:/Users/sbyy7/OneDrive/바탕 화면/Sporting/final/Sporting_front/src/redux/reducers/authReducer.js"],"sourcesContent":["import { LOGIN_SUCCESS, LOGOUT_SUCCESS } from \"../actions/authActions\";\r\nexport const FETCH_USER_INFO_REQUEST = \"FETCH_USER_INFO_REQUEST\";\r\nexport const FETCH_USER_INFO_SUCCESS = \"FETCH_USER_INFO_SUCCESS\";\r\nexport const FETCH_USER_INFO_FAILURE = \"FETCH_USER_INFO_FAILURE\";\r\n\r\n\r\n// 초기 상태\r\nconst initialState = {\r\n    isLoggedIn: false,\r\n    user: {\r\n        accessToken: \"\",\r\n        username: \"\",\r\n    },\r\n};\r\n\r\n// 리듀서 함수\r\nconst authReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case LOGIN_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isLoggedIn: true,\r\n                user: {\r\n                    accessToken: action.payload.accessToken,\r\n                    user_id: action.payload.user_id,\r\n                },\r\n            };\r\n        case LOGOUT_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isLoggedIn: false,\r\n                user: null,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default authReducer;\r\n\r\n/* 초기 상태를 정의하고 로그인 상태와 사용자 정보를 포함\r\n리듀서 함수를 작성 리듀서는 현재 상태와 액션을 받아 새로운 상태를 반환하는 함수 스위치문 사용해 액션 유형(authActions)에 따라 상태 변경\r\n*/\r\n"],"mappings":"AAAA,SAASA,aAAa,EAAEC,cAAc,QAAQ,wBAAwB;AACtE,OAAO,MAAMC,uBAAuB,GAAG,yBAAyB;AAChE,OAAO,MAAMC,uBAAuB,GAAG,yBAAyB;AAChE,OAAO,MAAMC,uBAAuB,GAAG,yBAAyB;;AAGhE;AACA,MAAMC,YAAY,GAAG;EACjBC,UAAU,EAAE,KAAK;EACjBC,IAAI,EAAE;IACFC,WAAW,EAAE,EAAE;IACfC,QAAQ,EAAE;EACd;AACJ,CAAC;;AAED;AACA,MAAMC,WAAW,GAAG,SAAAA,CAAA,EAAkC;EAAA,IAAjCC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGP,YAAY;EAAA,IAAEU,MAAM,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAC7C,QAAQC,MAAM,CAACC,IAAI;IACf,KAAKhB,aAAa;MACd,OAAO;QACH,GAAGW,KAAK;QACRL,UAAU,EAAE,IAAI;QAChBC,IAAI,EAAE;UACFC,WAAW,EAAEO,MAAM,CAACE,OAAO,CAACT,WAAW;UACvCU,OAAO,EAAEH,MAAM,CAACE,OAAO,CAACC;QAC5B;MACJ,CAAC;IACL,KAAKjB,cAAc;MACf,OAAO;QACH,GAAGU,KAAK;QACRL,UAAU,EAAE,KAAK;QACjBC,IAAI,EAAE;MACV,CAAC;IACL;MACI,OAAOI,KAAK;EACpB;AACJ,CAAC;AAED,eAAeD,WAAW;;AAE1B;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}